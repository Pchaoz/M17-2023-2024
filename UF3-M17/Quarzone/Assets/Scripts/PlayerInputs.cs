//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Player_Walking"",
            ""id"": ""dd89f236-f350-4195-bfbd-f6e4232f6494"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""f6285702-8de4-47e0-80a3-b19cfeb72a2e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""126279c0-fd72-4d95-8022-3a036bb169d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""bb20d56d-bcf3-45be-97b3-891c68851d82"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""2aa88dc0-2b45-45b5-89b4-8a8d4496d366"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Recharge"",
                    ""type"": ""Button"",
                    ""id"": ""0136363d-9489-4797-89ed-69b9b015cb5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangePosition"",
                    ""type"": ""Button"",
                    ""id"": ""89982c33-74aa-475d-9054-142b40f9761e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Melee"",
                    ""type"": ""Button"",
                    ""id"": ""baf56a11-0e62-4a9b-b640-bea440f4350c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2aae8b42-dc82-4121-bf2f-e1c8fd038b0c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4113b53c-9d13-4f4e-9b08-2c219e72c429"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""19b5c5a3-727d-4a40-aff0-10f313feb6a7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5772c3f0-a303-421b-9be4-245338e3b492"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cd4ffe65-fd04-4177-85d3-6957898df4dc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9e6d7f56-032e-4f35-bbf0-9c8fc9162cf6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""838fc367-d531-4fca-9d01-1238c03316f7"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XCaja"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9691729c-ee74-44af-963d-850d35170cb8"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XCaja"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d11b56ac-aa2f-4d4a-b676-f878fd0cc32a"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XCaja"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1ec8c603-bddf-4c2a-b5c1-be77bafd4d96"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XCaja"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0eb4d042-18c1-400a-ad93-990530474e0a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79628c2f-ac5a-4482-a2b6-f96a5a1a0a56"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XCaja"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4ebcf1c-03ae-4474-8fae-fa469c72ee1f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6ff479b-38ad-4539-a82e-5f2ebf161f46"",
                    ""path"": ""<XInputController>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XCaja"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ba703f8-33d6-4763-8132-5f057e60f997"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0afb9963-2def-40ae-b343-296f8daec3af"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Recharge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cad0e314-b634-46ac-8b8a-301e97884812"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XCaja"",
                    ""action"": ""Recharge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0b3ae46-bad2-45b6-a0e3-755c20e6475c"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XCaja"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67140463-72f1-4329-8fd9-b6aa92868ed9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd09c067-2ae3-4f7a-ada1-2ee66d454f51"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XCaja"",
                    ""action"": ""ChangePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""530c28af-3e25-4135-8ee0-51e781e6a07f"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Melee"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18ea3b67-71fd-46c4-b77f-7511a5e1032c"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XCaja"",
                    ""action"": ""Melee"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        },
        {
            ""name"": ""XCaja"",
            ""bindingGroup"": ""XCaja"",
            ""devices"": []
        }
    ]
}");
        // Player_Walking
        m_Player_Walking = asset.FindActionMap("Player_Walking", throwIfNotFound: true);
        m_Player_Walking_Movement = m_Player_Walking.FindAction("Movement", throwIfNotFound: true);
        m_Player_Walking_Jump = m_Player_Walking.FindAction("Jump", throwIfNotFound: true);
        m_Player_Walking_Look = m_Player_Walking.FindAction("Look", throwIfNotFound: true);
        m_Player_Walking_Shoot = m_Player_Walking.FindAction("Shoot", throwIfNotFound: true);
        m_Player_Walking_Recharge = m_Player_Walking.FindAction("Recharge", throwIfNotFound: true);
        m_Player_Walking_ChangePosition = m_Player_Walking.FindAction("ChangePosition", throwIfNotFound: true);
        m_Player_Walking_Melee = m_Player_Walking.FindAction("Melee", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_Walking
    private readonly InputActionMap m_Player_Walking;
    private IPlayer_WalkingActions m_Player_WalkingActionsCallbackInterface;
    private readonly InputAction m_Player_Walking_Movement;
    private readonly InputAction m_Player_Walking_Jump;
    private readonly InputAction m_Player_Walking_Look;
    private readonly InputAction m_Player_Walking_Shoot;
    private readonly InputAction m_Player_Walking_Recharge;
    private readonly InputAction m_Player_Walking_ChangePosition;
    private readonly InputAction m_Player_Walking_Melee;
    public struct Player_WalkingActions
    {
        private @PlayerInputs m_Wrapper;
        public Player_WalkingActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Walking_Movement;
        public InputAction @Jump => m_Wrapper.m_Player_Walking_Jump;
        public InputAction @Look => m_Wrapper.m_Player_Walking_Look;
        public InputAction @Shoot => m_Wrapper.m_Player_Walking_Shoot;
        public InputAction @Recharge => m_Wrapper.m_Player_Walking_Recharge;
        public InputAction @ChangePosition => m_Wrapper.m_Player_Walking_ChangePosition;
        public InputAction @Melee => m_Wrapper.m_Player_Walking_Melee;
        public InputActionMap Get() { return m_Wrapper.m_Player_Walking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_WalkingActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_WalkingActions instance)
        {
            if (m_Wrapper.m_Player_WalkingActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnLook;
                @Shoot.started -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnShoot;
                @Recharge.started -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnRecharge;
                @Recharge.performed -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnRecharge;
                @Recharge.canceled -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnRecharge;
                @ChangePosition.started -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnChangePosition;
                @ChangePosition.performed -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnChangePosition;
                @ChangePosition.canceled -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnChangePosition;
                @Melee.started -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnMelee;
                @Melee.performed -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnMelee;
                @Melee.canceled -= m_Wrapper.m_Player_WalkingActionsCallbackInterface.OnMelee;
            }
            m_Wrapper.m_Player_WalkingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Recharge.started += instance.OnRecharge;
                @Recharge.performed += instance.OnRecharge;
                @Recharge.canceled += instance.OnRecharge;
                @ChangePosition.started += instance.OnChangePosition;
                @ChangePosition.performed += instance.OnChangePosition;
                @ChangePosition.canceled += instance.OnChangePosition;
                @Melee.started += instance.OnMelee;
                @Melee.performed += instance.OnMelee;
                @Melee.canceled += instance.OnMelee;
            }
        }
    }
    public Player_WalkingActions @Player_Walking => new Player_WalkingActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_XCajaSchemeIndex = -1;
    public InputControlScheme XCajaScheme
    {
        get
        {
            if (m_XCajaSchemeIndex == -1) m_XCajaSchemeIndex = asset.FindControlSchemeIndex("XCaja");
            return asset.controlSchemes[m_XCajaSchemeIndex];
        }
    }
    public interface IPlayer_WalkingActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnRecharge(InputAction.CallbackContext context);
        void OnChangePosition(InputAction.CallbackContext context);
        void OnMelee(InputAction.CallbackContext context);
    }
}
